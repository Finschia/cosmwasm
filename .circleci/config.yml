version: 2
workflows:
  version: 2
  test:
    # Keep those job names in sync with .mergify.yml
    jobs:
      - package_schema
      - package_std
      - package_storage
      - package_ext
      - package_vm_cranelift
      - package_vm_singlepass
      - contract_burner
      - contract_hackatom
      - contract_hackatom_in_singlepass_vm
      - contract_queue
      - contract_reflect
      - contract_staking
      - fmt
      - clippy
  deploy:
    jobs:
      - build_and_upload_devcontracts:
          filters:
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+.*/
            branches:
              ignore: /.*/

jobs:
  package_schema:
    docker:
      - image: rust:1.45.2
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_schema-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/schema
          command: cargo build --locked
      - run:
          name: Run tests
          working_directory: ~/project/packages/schema
          command: cargo test --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_schema-rust:1.45.2-{{ checksum "Cargo.lock" }}

  package_std:
    docker:
      - image: rust:1.45.2
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_std-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build library for native target (no features)
          working_directory: ~/project/packages/std
          command: cargo build --locked --no-default-features
      - run:
          name: Build library for wasm target (no features)
          working_directory: ~/project/packages/std
          command: cargo wasm --locked --no-default-features
      - run:
          name: Run unit tests (no features)
          working_directory: ~/project/packages/std
          command: cargo test --locked --no-default-features
      - run:
          name: Build library for native target (all features)
          working_directory: ~/project/packages/std
          command: cargo build --locked --features iterator,staking
      - run:
          name: Build library for wasm target (all features)
          working_directory: ~/project/packages/std
          command: cargo wasm --locked --features iterator,staking
      - run:
          name: Run unit tests (all features)
          working_directory: ~/project/packages/std
          command: cargo test --locked --features iterator,staking
      - run:
          name: Build and run schema generator
          working_directory: ~/project/packages/std
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_std-rust:1.45.2-{{ checksum "Cargo.lock" }}

  package_storage:
    docker:
      - image: rust:1.45.2
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_storage-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Build library for native target
          working_directory: ~/project/packages/storage
          command: cargo build --locked
      - run:
          name: Run unit tests
          working_directory: ~/project/packages/storage
          command: cargo test --locked
      - run:
          name: Run unit tests (with iterator support)
          working_directory: ~/project/packages/storage
          command: cargo test --locked --features iterator
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_storage-rust:1.45.2-{{ checksum "Cargo.lock" }}

  package_ext:
    docker:
      - image: rust:1.45.2
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_std-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build library for native target (no features)
          working_directory: ~/project/packages/ext
          command: cargo build --locked --no-default-features
      - run:
          name: Build library for wasm target (no features)
          working_directory: ~/project/packages/ext
          command: cargo wasm --locked --no-default-features
      - run:
          name: Run unit tests (no features)
          working_directory: ~/project/packages/ext
          command: cargo test --locked --no-default-features
      - run:
          name: Build library for native target (all features)
          working_directory: ~/project/packages/ext
          command: cargo build --locked
      - run:
          name: Build library for wasm target (all features)
          working_directory: ~/project/packages/ext
          command: cargo wasm --locked
      - run:
          name: Run unit tests (all features)
          working_directory: ~/project/packages/ext
          command: cargo test --locked
      - run:
          name: Build and run schema generator
          working_directory: ~/project/packages/ext
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_std-rust:1.45.2-{{ checksum "Cargo.lock" }}

  package_vm_cranelift:
    docker:
      - image: rust:1.45.2
    steps:
      - checkout
      - run:
          name: Install CMake (required for compiling wabt-sys, a dev dependency of the VM)
          command: apt-get update && apt-get install -y cmake
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_vm_cranelift-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/vm
          command: cargo build --locked --no-default-features --features default-cranelift,iterator
      - run:
          name: Test
          working_directory: ~/project/packages/vm
          command: cargo test --locked --no-default-features --features default-cranelift,iterator
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_vm_cranelift-rust:1.45.2-{{ checksum "Cargo.lock" }}

  package_vm_singlepass:
    docker:
      - image: rustlang/rust:nightly
    steps:
      - checkout
      - run:
          name: Install CMake (required for compiling wabt-sys, a dev dependency of the VM)
          command: apt-get update && apt-get install -y cmake
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-package_vm_singlepass-rust:nightly-{{ checksum "Cargo.lock" }}
      - run:
          name: Build
          working_directory: ~/project/packages/vm
          command: cargo build --locked
      - run:
          name: Build with iterator
          working_directory: ~/project/packages/vm
          command: cargo build --locked --features iterator
      - run:
          name: Test
          working_directory: ~/project/packages/vm
          command: cargo test --locked
      - run:
          name: Test with iterator
          working_directory: ~/project/packages/vm
          command: cargo test --locked --features iterator
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-package_vm_singlepass-rust:nightly-{{ checksum "Cargo.lock" }}

  contract_burner:
    docker:
      - image: rust:1.45.2
    working_directory: ~/cosmwasm/contracts/burner
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_burner-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          env: RUST_BACKTRACE=1
          command: cargo unit-test --locked
      - run:
          name: Integration tests
          command: cargo integration-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_burner-rust:1.45.2-{{ checksum "Cargo.lock" }}

  contract_hackatom:
    docker:
      - image: rust:1.45.2
    working_directory: ~/cosmwasm/contracts/hackatom
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_hackatom-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          env: RUST_BACKTRACE=1
          command: cargo unit-test --locked
      - run:
          name: Integration tests
          command: cargo integration-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_hackatom-rust:1.45.2-{{ checksum "Cargo.lock" }}

  # In this job we use singlepass as the VM to execute integration tests. This requires Rust nightly.
  # Avoid duplicating generic checks like unit tests or schema generation – they belong in the generic hackatom job.
  contract_hackatom_in_singlepass_vm:
    docker:
      - image: rustlang/rust:nightly
    working_directory: ~/cosmwasm/contracts/hackatom
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_hackatom_in_singlepass_vm-rust:nightly-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Integration tests
          command: cargo integration-test --no-default-features --features singlepass --locked
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_hackatom_in_singlepass_vm-rust:nightly-{{ checksum "Cargo.lock" }}

  contract_queue:
    docker:
      - image: rust:1.45.2
    working_directory: ~/cosmwasm/contracts/queue
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_queue-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          env: RUST_BACKTRACE=1
          command: cargo unit-test --locked
      - run:
          name: Integration tests
          command: cargo integration-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_queue-rust:1.45.2-{{ checksum "Cargo.lock" }}

  contract_reflect:
    docker:
      - image: rust:1.45.2
    working_directory: ~/cosmwasm/contracts/reflect
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_reflect-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          env: RUST_BACKTRACE=1
          command: cargo unit-test --locked
      - run:
          name: Integration tests
          command: cargo integration-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_reflect-rust:1.45.2-{{ checksum "Cargo.lock" }}

  contract_staking:
    docker:
      - image: rust:1.45.2
    working_directory: ~/cosmwasm/contracts/staking
    steps:
      - checkout:
          path: ~/cosmwasm
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version
      - restore_cache:
          keys:
            - cargocache-v2-contract_staking-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown && rustup target list --installed
      - run:
          name: Build wasm binary
          command: cargo wasm --locked
      - run:
          name: Unit tests
          env: RUST_BACKTRACE=1
          command: cargo unit-test --locked
      - run:
          name: Integration tests
          command: cargo integration-test --locked
      - run:
          name: Build and run schema generator
          command: cargo schema --locked
      - run:
          name: Ensure schemas are up-to-date
          command: |
            CHANGES_IN_REPO=$(git status --porcelain)
            if [[ -n "$CHANGES_IN_REPO" ]]; then
              echo "Repository is dirty. Showing 'git status' and 'git --no-pager diff' for debugging now:"
              git status && git --no-pager diff
              exit 1
            fi
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - target/wasm32-unknown-unknown/release/.fingerprint
            - target/wasm32-unknown-unknown/release/build
            - target/wasm32-unknown-unknown/release/deps
          key: cargocache-v2-contract_staking-rust:1.45.2-{{ checksum "Cargo.lock" }}

  fmt:
    docker:
      - image: rust:1.45.2
    steps:
      - checkout
      - run:
          name: Version information
          command: rustc --version; cargo --version; rustup --version; rustup target list --installed
      - restore_cache:
          keys:
            - cargocache-v2-fmt-rust:1.45.2-{{ checksum "Cargo.lock" }}
      - run:
          name: Add rustfmt component
          command: rustup component add rustfmt
      - run:
          name: Check formatting of workspace
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract burner
          working_directory: ~/project/contracts/burner
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract hackatom
          working_directory: ~/project/contracts/hackatom
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract reflect
          working_directory: ~/project/contracts/reflect
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract queue
          working_directory: ~/project/contracts/queue
          command: cargo fmt -- --check
      - run:
          name: Check formatting of contract staking
          working_directory: ~/project/contracts/staking
          command: cargo fmt -- --check
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
          key: cargocache-v2-fmt-rust:1.45.2-{{ checksum "Cargo.lock" }}

  clippy:
    docker:
      - image: rust:1.45.2
    environment:
      # Make sure to choose version with clippy present: https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu.html
      NIGHTLY_TOOLCHAIN: nightly-2020-09-08
    steps:
      - checkout
      - run:
          name: Install Rust nightly
          command: |
            rustup --version
            rustup toolchain install $NIGHTLY_TOOLCHAIN --allow-downgrade --profile minimal --component clippy
            rustup target list --installed
      - run:
          name: Version information (default; stable)
          command: rustc --version && cargo --version
      - run:
          name: Version information (nightly)
          command: rustc +$NIGHTLY_TOOLCHAIN --version && cargo +$NIGHTLY_TOOLCHAIN --version
      - restore_cache:
          keys:
            - cargocache-v2-clippy-rust:1.45.2-{{ checksum "Cargo.lock" }}-{{ checksum "contracts/burner/Cargo.lock" }}-{{ checksum "contracts/hackatom/Cargo.lock" }}-{{ checksum "contracts/queue/Cargo.lock" }}-{{ checksum "contracts/reflect/Cargo.lock" }}-{{ checksum "contracts/staking/Cargo.lock" }}
      - run:
          name: Add clippy component
          command: rustup component add clippy
      #
      # Workspace packages
      #
      - run:
          name: Clippy linting on schema
          working_directory: ~/project/packages/schema
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on std (no feature flags)
          working_directory: ~/project/packages/std
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on std (all feature flags)
          working_directory: ~/project/packages/std
          command: cargo clippy --features iterator,staking -- -D warnings
      - run:
          name: Clippy linting on storage (no feature flags)
          working_directory: ~/project/packages/storage
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on storage (all feature flags)
          working_directory: ~/project/packages/storage
          command: cargo clippy --features iterator -- -D warnings
      - run:
          name: Clippy linting on vm (singlepass; no feature flags)
          working_directory: ~/project/packages/vm
          command: cargo +$NIGHTLY_TOOLCHAIN clippy -- -D warnings
      - run:
          name: Clippy linting on vm (singlepass; all feature flags)
          working_directory: ~/project/packages/vm
          command: cargo +$NIGHTLY_TOOLCHAIN clippy --features iterator -- -D warnings
      - run:
          name: Clippy linting on vm (cranelift; no feature flags)
          working_directory: ~/project/packages/vm
          command: cargo +$NIGHTLY_TOOLCHAIN clippy --no-default-features --features default-cranelift -- -D warnings
      - run:
          name: Clippy linting on vm (cranelift; all feature flags)
          working_directory: ~/project/packages/vm
          command: cargo +$NIGHTLY_TOOLCHAIN clippy --no-default-features --features default-cranelift,iterator -- -D warnings
      #
      # Contracts
      #
      - run:
          name: Clippy linting on burner
          working_directory: ~/project/contracts/burner
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on hackatom
          working_directory: ~/project/contracts/hackatom
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on queue
          working_directory: ~/project/contracts/queue
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on reflect
          working_directory: ~/project/contracts/reflect
          command: cargo clippy -- -D warnings
      - run:
          name: Clippy linting on staking
          working_directory: ~/project/contracts/staking
          command: cargo clippy -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target/debug/.fingerprint
            - target/debug/build
            - target/debug/deps
            - contracts/burner/target/debug/.fingerprint
            - contracts/burner/target/debug/build
            - contracts/burner/target/debug/deps
            - contracts/hackatom/target/debug/.fingerprint
            - contracts/hackatom/target/debug/build
            - contracts/hackatom/target/debug/deps
            - contracts/queue/target/debug/.fingerprint
            - contracts/queue/target/debug/build
            - contracts/queue/target/debug/deps
            - contracts/reflect/target/debug/.fingerprint
            - contracts/reflect/target/debug/build
            - contracts/reflect/target/debug/deps
            - contracts/staking/target/debug/.fingerprint
            - contracts/staking/target/debug/build
            - contracts/staking/target/debug/deps
          key: cargocache-v2-clippy-rust:1.45.2-{{ checksum "Cargo.lock" }}-{{ checksum "contracts/burner/Cargo.lock" }}-{{ checksum "contracts/hackatom/Cargo.lock" }}-{{ checksum "contracts/queue/Cargo.lock" }}-{{ checksum "contracts/reflect/Cargo.lock" }}-{{ checksum "contracts/staking/Cargo.lock" }}

  # This job roughly follows the instructions from https://circleci.com/blog/publishing-to-github-releases-via-circleci/
  build_and_upload_devcontracts:
    docker:
      # Image from https://github.com/cibuilds/github, based on alpine
      - image: cibuilds/github:0.13
    steps:
      - run:
          name: Install Docker client
          command: apk add docker-cli
      - setup_remote_docker
      - checkout
      - run:
          name: Create atrifacts directory
          command: mkdir ./artifacts
      - run:
          # We cannot mount local folders, see https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Prepare volume with source code
          command: |
            # create a dummy container which will hold a volume with config
            docker create -v /code --name with_code alpine /bin/true
            # copy a config file into this volume
            docker cp ./contracts with_code:/code
            docker cp ./packages with_code:/code
      - run:
          name: Build development contracts
          command: |
            for contract_dir in ./contracts/*/; do
              name=$(basename $contract_dir)
              echo "Building $name ..."
              docker run --volumes-from with_code cosmwasm/rust-optimizer:0.10.4 ./contracts/$name
              docker cp with_code:/code/artifacts/$name.wasm ./artifacts/$name.wasm
            done
      - run:
          name: Create checksums
          working_directory: artifacts
          command: sha256sum *.wasm > checksums.txt && cat checksums.txt
      - run:
          name: Publish artifacts on GitHub
          command: |
            TAG="$CIRCLE_TAG"
            TITLE="$TAG"
            BODY="Attached there are some build artifacts generated at this tag. Those are for development purposes only! Please use crates.io to find the packages of this release."
            ghr -t "$GITHUB_TOKEN" \
              -u "$CIRCLE_PROJECT_USERNAME" -r "$CIRCLE_PROJECT_REPONAME" \
              -c "$CIRCLE_SHA1" \
              -n "$TITLE" -b "$BODY" \
              -delete \
              "$TAG" ./artifacts/
